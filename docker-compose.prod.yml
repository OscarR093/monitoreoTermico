services:
  # ----------------------------------------------------
  # Caddy (Reverse Proxy y Gestor de SSL)
  # ----------------------------------------------------
  caddy:
    image: caddy:latest
    container_name: mi-caddy-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy-data:/data # Caddy guarda todo aqu√≠, incluyendo los certificados
    environment:
      - DOMAIN_URL=${DOMAIN_URL}
    networks:
      - mi-red

  # ----------------------------------------------------
  # Aplicaci√≥n Node.js (Backend)
  # ----------------------------------------------------
  node-app:
    image: oscarr093/monitoreotermico:1.0 # Apunta a tu imagen ya subida
    container_name: mi-aplicacion-nodejs
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASS}@mongodb:27017/${MONGO_DB_NAME}?authSource=admin
      - MQTT_BROKER_URL=mqtt://emqx
      - MQTT_USER=${MOSQUITTO_USER}
      - MQTT_PASS=${MOSQUITTO_PASS}
      - JWT_SECRET=${JWT_SECRET}
      - DOMAIN_URL=${DOMAIN_URL}
      - NODE_ENV=production
    depends_on:
      - mongodb
      - emqx
    networks:
      - mi-red

  # ----------------------------------------------------
  # Base de Datos MongoDB
  # ----------------------------------------------------
  mongodb:
    image: mongodb/mongodb-community-server:7.0-ubi8
    container_name: mi-database-mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
    volumes:
      - datos-mongo:/data/db
    networks:
      - mi-red

  # ----------------------------------------------------
  # Broker EMQX (con variables de script escapadas)
  # ----------------------------------------------------
  emqx:
    image: emqx/emqx:5.7.0
    container_name: mi-broker-emqx
    restart: unless-stopped
    depends_on:
      - caddy
    command: >
      sh -c '
        SRC_KEY_PATH="/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${DOMAIN_URL}/${DOMAIN_URL}.key";
        SRC_CERT_PATH="/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${DOMAIN_URL}/${DOMAIN_URL}.crt";
        DEST_KEY_PATH="/opt/emqx/etc/certs/server.key";
        DEST_CERT_PATH="/opt/emqx/etc/certs/server.crt";
        
        while [ ! -f "$${SRC_KEY_PATH}" ]; do
          echo "‚è≥ Esperando a que Caddy genere el certificado SSL...";
          sleep 5;
        done &&
        
        echo "‚úÖ ¬°Certificado encontrado! Copiando y estableciendo permisos...";
        cp "$${SRC_KEY_PATH}" "$${DEST_KEY_PATH}" &&
        cp "$${SRC_CERT_PATH}" "$${DEST_CERT_PATH}" &&
        chown 1000:1000 "$${DEST_KEY_PATH}" "$${DEST_CERT_PATH}" &&
        
        echo "üöÄ Iniciando EMQX...";
        /usr/bin/docker-entrypoint.sh emqx run
      '
    environment:
      - "EMQX_LISTENERS__TCP__DEFAULT__BIND=1883"
      - "EMQX_LISTENERS__SSL__DEFAULT__BIND=8883"
      # Apunta a la ruta de destino DENTRO del contenedor de EMQX
      - "EMQX_LISTENERS__SSL__DEFAULT__SSL_OPTIONS__KEYFILE=/opt/emqx/etc/certs/server.key"
      - "EMQX_LISTENERS__SSL__DEFAULT__SSL_OPTIONS__CERTFILE=/opt/emqx/etc/certs/server.crt"
      - "EMQX_AUTH__USER__1__USERNAME=${MOSQUITTO_USER}"
      - "EMQX_AUTH__USER__1__PASSWORD=${MOSQUITTO_PASS}"
      - "EMQX_NODE__COOKIE=${EMQX_NODE_COOKIE}"
    ports:
      - "1883:1883"
      - "8883:8883"
      - "18083:1803"
    volumes:
      - caddy-data:/data:ro
    networks:
      - mi-red

networks:
  mi-red:

volumes:
  datos-mongo: {}
  caddy-data: {}

